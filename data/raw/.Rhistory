# ~/.Rprofile
default_packages <- c("AER", "plm", "fixest", "lmtest", "sandwich", "gmm",
"tidyverse", "data.table", "janitor", "lubridate",
"ggplot2", "ggstatsplot", "cowplot", "viridis",
"broom", "margins", "modelsummary", "performance",
"tseries", "xts", "zoo", "forecast", "survey", "srvyr",
"haven", "readxl", "vroom", "httr", "knitr", "rmarkdown",
"kableExtra", "bookdown", "tinytex", "tigris", "sf")
# Automatically install missing packages and load them
lapply(default_packages, function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
})
api <- "https://data.cms.gov/data-api/v1/dataset/939226be-b107-476e-8777-f199a840138a/data"
response <- get(api)
library(httr)
library(jsonlite)
library(dplyr)
# API URL
api <- "https://data.cms.gov/data-api/v1/dataset/939226be-b107-476e-8777-f199a840138a/data"
# Make the request
response <- GET(api)
# Check status and extract content
if (status_code(response) == 200) {
cms_data <- fromJSON(content(response, "text"))
glimpse(cms_data)
} else {
stop("API request failed with status: ", status_code(response))
}
cms_data %>%
group_by(year) %>%
summarise(total_visits = sum(telehealth_visits, na.rm = TRUE)) %>%
ggplot(aes(x = year, y = total_visits)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkblue") +
labs(title = "Total Telehealth Visits by Year",
x = "Year", y = "Total Visits")
View(cms_data)
head(cms_data)
names(cms_data)
cms_data %>%
group_by(Year) %>%
summarise(total_visits = sum(telehealth_visits, na.rm = TRUE)) %>%
ggplot(aes(x = year, y = total_visits)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkblue") +
labs(title = "Total Telehealth Visits by Year",
x = "Year", y = "Total Visits")
library(dplyr)
library(ggplot2)
cms_data %>%
group_by(Year) %>%
summarise(total_visits = sum(Total_Bene_Telehealth, na.rm = TRUE)) %>%
ggplot(aes(x = Year, y = total_visits)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkblue") +
labs(
title = "Total Medicare Telehealth Visits by Year",
x = "Year", y = "Total Visits"
) +
theme_minimal()
str(cms_data$Year)
cms_data$Year <- as.numeric(cms_data$Year)
library(dplyr)
library(ggplot2)
cms_data %>%
group_by(Year) %>%
summarise(total_visits = sum(Total_Bene_Telehealth, na.rm = TRUE)) %>%
ggplot(aes(x = Year, y = total_visits)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkblue") +
labs(
title = "Total Medicare Telehealth Visits by Year",
x = "Year", y = "Total Visits"
) +
theme_minimal()
library(dplyr)
cms_data <- cms_data %>%
mutate(
Year = as.numeric(Year),
Total_Bene_Telehealth = as.numeric(gsub(",", "", Total_Bene_Telehealth))
)
cms_data %>%
group_by(Year) %>%
summarise(total_visits = sum(Total_Bene_Telehealth, na.rm = TRUE)) %>%
ggplot(aes(x = Year, y = total_visits)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkblue") +
labs(
title = "Total Medicare Telehealth Visits by Year",
x = "Year", y = "Total Visits"
) +
theme_minimal()
# ==============================
# SBA Capstone Learning App
# Author: Eric Walczyk
# Purpose: Practice Shiny fundamentals with built-in dataset (mtcars)
# ==============================
# ---- Load Packages ----
library(shiny)
library(ggplot2)
library(dplyr)
# ---- Load Data ----
# Using built-in 'mtcars' dataset; converting 'cyl' to a factor for better labeling
data <- mtcars %>%
mutate(cyl = as.factor(cyl))
# ---- Define UI ----
ui <- fluidPage(
# App Title
titlePanel("MTCars Dashboard Example"),
# Layout: Sidebar + Main Panel
sidebarLayout(
# Sidebar: User input
sidebarPanel(
selectInput(
inputId = "cyl_input",
label = "Select number of cylinders:",
choices = levels(data$cyl),
selected = "6"
)
),
# Main Panel: Outputs
mainPanel(
plotOutput("mpg_plot"),
br(),
textOutput("summary_text")
)
)
)
# ---- Define Server Logic ----
server <- function(input, output, session) {
# Reactive: Filter data based on cylinder selection
filtered_data <- reactive({
data %>%
filter(cyl == input$cyl_input)
})
# Render Plot: MPG vs Horsepower
output$mpg_plot <- renderPlot({
ggplot(filtered_data(), aes(x = mpg, y = hp)) +
geom_point(color = "steelblue", size = 3) +
labs(
title = paste("MPG vs HP for", input$cyl_input, "Cylinder Cars"),
x = "Miles Per Gallon (mpg)",
y = "Horsepower (hp)"
) +
theme_minimal()
})
# Render Text: Basic summary
output$summary_text <- renderText({
avg_mpg <- mean(filtered_data()$mpg)
paste("Average MPG for", input$cyl_input, "cylinder cars is", round(avg_mpg, 1))
})
}
# ---- Launch the App ----
shinyApp(ui = ui, server = server)
install.packages("languageserver")
getwd
setwd("~/Vorb/02_school/capstone/SBA-Capstone-Dashboard/data/raw")
import requests
import requests
library(httr)
library(jsonlite)
# Example endpoint: Spending by category (adjust to your needs)
url <- "https://api.usaspending.gov/api/v2/search/spending_by_category/"
body <- list(
category = "awarding_agency",
filters = list(
time_period = list(list(start_date = "2022-01-01", end_date = "2022-12-31"))
)
)
response <- POST(url, body = body, encode = "json", content_type_json())
data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(data, flatten = TRUE)
url <- "https://api.usaspending.gov/api/v2/search/spending_by_category/"
body <- list(
category = "awarding_agency",
filters = list(
time_period = list(list(start_date = "2022-01-01", end_date = "2022-12-31"))
)
)
response <- POST(
url,
body = body,
encode = "json",
add_headers(`Content-Type` = "application/json", `User-Agent` = "R Script - Eric Walczyk")
)
# Check if status code is 200 (success)
stop_for_status(response)
library(httr)
library(jsonlite)
url <- "https://api.usaspending.gov/api/v2/search/spending_by_award/"
body <- list(
filters = list(
award_type_codes = list("A", "B", "C", "D"),  # Contract awards
time_period = list(list(start_date = "2022-01-01", end_date = "2022-12-31"))
),
fields = list("Award ID", "Recipient Name", "Amount", "Awarding Agency", "Recipient Location"),
page = 1,
limit = 10,
sort = "Amount",
order = "desc"
)
response <- POST(
url,
body = body,
encode = "json",
add_headers(`Content-Type` = "application/json", `User-Agent` = "R Script - Eric Walczyk")
)
stop_for_status(response)
